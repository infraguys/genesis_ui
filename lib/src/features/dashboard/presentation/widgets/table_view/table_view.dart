import 'package:flutter/material.dart';
import 'package:two_dimensional_scrollables/two_dimensional_scrollables.dart';

class AppTableView extends StatelessWidget {
  const AppTableView({super.key});

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final colorScheme = theme.colorScheme;
    final decoration = TableSpanDecoration(
      border: TableSpanBorder(
        trailing: BorderSide(color: theme.dividerColor),
      ),
    );
    final inventories = dummyInventories;

    return Card(
      clipBehavior: Clip.antiAlias,
      child: TableView.builder(
        columnCount: Inventory.itemCount,
        rowCount: inventories.length,
        pinnedRowCount: 1,
        pinnedColumnCount: 1,
        columnBuilder: (index) {
          var fraction = 1 / 8;
          switch (index) {
            case 0:
              fraction = 1 / 8;
            case 1:
              fraction = 11 / 16;
            case 2:
              fraction = 1 / 8;
            case 3:
              fraction = 1 / 16;
          }

          return TableSpan(
            foregroundDecoration: index == 0 ? decoration : null,
            extent: FractionalTableSpanExtent(fraction),
          );
        },
        rowBuilder: (index) {
          return TableSpan(
            foregroundDecoration: index == 0 ? decoration : null,
            extent: const FixedTableSpanExtent(50),
          );
        },
        cellBuilder: (context, vicinity) {
          final isStickyHeader = vicinity.xIndex == 0 || vicinity.yIndex == 0;
          var label = '';
          var alignment = Alignment.center;
          if (vicinity.yIndex == 0) {
            switch (vicinity.xIndex) {
              case 0:
                label = 'Event';
              case 1:
                label = 'Description';
                alignment = Alignment.centerLeft;
              case 2:
                label = 'time';
              case 3:
                label = 'Status';
            }
          } else {
            final inventory = inventories[vicinity.yIndex - 1];
            switch (vicinity.xIndex) {
              case 0:
                label = inventory.event;
              case 1:
                label = inventory.description;
                alignment = Alignment.centerLeft;
              case 2:
                label = inventory.time;
              case 3:
                label = inventory.status;
            }
          }
          return TableViewCell(
            child: ColoredBox(
              color: isStickyHeader ? Colors.transparent : colorScheme.background,
              child: Align(
                alignment: alignment,
                child: FittedBox(
                  child: Padding(
                    padding: const EdgeInsets.all(8),
                    child: Text(
                      label,
                      style: TextStyle(
                        fontWeight: isStickyHeader ? FontWeight.w600 : null,
                        color: isStickyHeader ? null : colorScheme.outline,
                      ),
                    ),
                  ),
                ),
              ),
            ),
          );
        },
      ),
    );
  }
}

List<Inventory> dummyInventories = _json.map((json) {
  if (json case {
    'event': final String event,
    'description': final String description,
    'time': final String time,
    'status': final String status,
  }) {
    return Inventory(
      event: event,
      description: description,
      time: time,
      status: status,
    );
  } else {
    throw const FormatException('Unexpected JSON');
  }
}).toList();

// Generated by ChatGPT
const _json = [
  {
    'event': 'User deleted',
    'description': 'The user has been removed from the system.',
    'time': '2025-05-11 17:30:00',
    'status': 'REMOVED',
  },
  {
    'event': 'Node resize',
    'description': 'The node with UUID 12345678-1234-1234-1234-123456789012 has been resized.',
    'time': '2025-05-11 16:05:00',
    'status': 'STARTED',
  },
  {
    'event': 'User updated',
    'description': 'User information was successfully updated.',
    'time': '2025-05-11 17:00:00',
    'status': 'COMPLETED',
  },
  {
    'event': 'Node active',
    'description': 'The node with UUID 12345678-1234-1234-1234-123456789012 is actively processing.',
    'time': '2025-05-11 16:10:00',
    'status': 'ACTIVE',
  },
  {
    'event': 'Node started',
    'description': 'The node with UUID 12345678-1234-1234-1234-123456789012 has started processing.',
    'time': '2025-05-11 16:05:00',
    'status': 'STARTED',
  },
  {
    'event': 'User checked',
    'description': 'The user test@user.com was checked and no issues were found.',
    'time': '2025-05-11 16:46:00',
    'status': 'ACTIVE',
  },
  {
    'event': 'User added',
    'description': 'A new user was registered in the system.',
    'time': '2025-05-11 16:45:00',
    'status': 'NEW',
  },
  {
    'event': 'Node scheduled',
    'description': 'The node with UUID 12345678-1234-1234-1234-123456789012 has been scheduled for execution.',
    'time': '2025-05-11 16:00:00',
    'status': 'SCHEDULED',
  },
  {
    'event': 'Node created',
    'description': 'The new node was create with UUID 12345678-1234-1234-1234-123456789012.',
    'time': '2025-05-11 15:45:00',
    'status': 'NEW',
  },
  {
    'event': 'User deleted',
    'description': 'The user has been removed from the system.',
    'time': '2025-05-11 17:30:00',
    'status': 'REMOVED',
  },
  {
    'event': 'Node resize',
    'description': 'The node with UUID 12345678-1234-1234-1234-123456789012 has been resized.',
    'time': '2025-05-11 16:05:00',
    'status': 'STARTED',
  },
  {
    'event': 'User updated',
    'description': 'User information was successfully updated.',
    'time': '2025-05-11 17:00:00',
    'status': 'COMPLETED',
  },
  {
    'event': 'Node active',
    'description': 'The node with UUID 12345678-1234-1234-1234-123456789012 is actively processing.',
    'time': '2025-05-11 16:10:00',
    'status': 'ACTIVE',
  },
  {
    'event': 'Node started',
    'description': 'The node with UUID 12345678-1234-1234-1234-123456789012 has started processing.',
    'time': '2025-05-11 16:05:00',
    'status': 'STARTED',
  },
  {
    'event': 'User checked',
    'description': 'The user test@user.com was checked and no issues were found.',
    'time': '2025-05-11 16:46:00',
    'status': 'ACTIVE',
  },
  {
    'event': 'User added',
    'description': 'A new user was registered in the system.',
    'time': '2025-05-11 16:45:00',
    'status': 'NEW',
  },
  {
    'event': 'Node scheduled',
    'description': 'The node with UUID 12345678-1234-1234-1234-123456789012 has been scheduled for execution.',
    'time': '2025-05-11 16:00:00',
    'status': 'SCHEDULED',
  },
  {
    'event': 'Node created',
    'description': 'The new node was create with UUID 12345678-1234-1234-1234-123456789012.',
    'time': '2025-05-11 15:45:00',
    'status': 'NEW',
  },
];

class Inventory {
  Inventory({
    required this.event,
    required this.description,
    required this.time,
    required this.status,
  });
  final String event;
  final String description;
  final String time;
  final String status;

  static const itemCount = 4;
}
